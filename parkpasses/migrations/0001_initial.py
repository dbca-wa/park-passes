# Generated by Django 3.2.13 on 2022-06-07 02:25

import ckeditor.fields
import dirtyfields.dirtyfields
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AmendmentReason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(max_length=125, verbose_name='Reason')),
            ],
            options={
                'verbose_name': 'Application Amendment Reason',
                'verbose_name_plural': 'Application Amendment Reasons',
            },
        ),
        migrations.CreateModel(
            name='ApplicationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('registration_of_interest', 'Registration of Interest'), ('lease_licence', 'Lease Licence')], max_length=64, unique=True)),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('visible', models.BooleanField(default=True)),
                ('application_fee', models.DecimalField(decimal_places=2, max_digits=6, null=True, verbose_name='Application Fee')),
                ('oracle_code_application', models.CharField(max_length=50)),
                ('oracle_code_licence', models.CharField(max_length=50)),
                ('is_gst_exempt', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CommunicationsLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to', models.TextField(blank=True, verbose_name='To')),
                ('fromm', models.CharField(blank=True, max_length=200, verbose_name='From')),
                ('cc', models.TextField(blank=True, verbose_name='cc')),
                ('type', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone Call'), ('mail', 'Mail'), ('person', 'In Person'), ('onhold', 'On Hold'), ('onhold_remove', 'Remove On Hold'), ('with_qaofficer', 'With QA Officer'), ('with_qaofficer_completed', 'QA Officer Completed'), ('referral_complete', 'Referral Completed')], default='email', max_length=35)),
                ('reference', models.CharField(blank=True, max_length=100)),
                ('subject', models.CharField(blank=True, max_length=200, verbose_name='Subject / Description')),
                ('text', models.TextField(blank=True)),
                ('customer', models.IntegerField()),
                ('staff', models.IntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GlobalSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(choices=[], max_length=255)),
                ('value', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Global Settings',
            },
        ),
        migrations.CreateModel(
            name='OracleCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_type', models.CharField(choices=[('registration_of_interest', 'registration_of_interest'), ('lease_licence', 'lease_licence')], default='registration_of_interest', max_length=64, verbose_name='Application Type')),
                ('code', models.CharField(blank=True, max_length=50)),
                ('archive_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Proposal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proposed_issuance_approval', models.JSONField(blank=True, null=True)),
                ('ind_applicant', models.IntegerField(blank=True, null=True)),
                ('proxy_applicant', models.IntegerField(blank=True, null=True)),
                ('lodgement_number', models.CharField(blank=True, default='', max_length=9)),
                ('lodgement_sequence', models.IntegerField(blank=True, default=0)),
                ('lodgement_date', models.DateTimeField(blank=True, null=True)),
                ('submitter', models.IntegerField(null=True)),
                ('assigned_officer', models.IntegerField(null=True)),
                ('assigned_approver', models.IntegerField(null=True)),
                ('approved_by', models.IntegerField(null=True)),
                ('processing_status', models.CharField(choices=[('draft', 'Draft'), ('with_assessor', 'With Assessor'), ('with_assessor_conditions', 'With Assessor (Conditions)'), ('with_approver', 'With Approver'), ('with_referral', 'With Referral'), ('with_referral_conditions', 'With Referral (Conditions)'), ('approved_application', 'Approved (Application)'), ('approved_competitive_process', 'Approved (Competitive Process)'), ('approved_editing_invoicing', 'Approved (Editing Invoicing)'), ('approved', 'Approved'), ('declined', 'Declined'), ('discarded', 'Discarded')], default='draft', max_length=30, verbose_name='Processing Status')),
                ('prev_processing_status', models.CharField(blank=True, max_length=30, null=True)),
                ('proposed_decline_status', models.BooleanField(default=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('approval_level', models.CharField(blank=True, max_length=255, null=True, verbose_name='Activity matrix approval level')),
                ('approval_comment', models.TextField(blank=True)),
                ('details_text', models.TextField(blank=True)),
                ('migrated', models.BooleanField(default=False)),
                ('application_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='parkpasses.applicationtype')),
                ('generated_proposal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='originating_proposal', to='parkpasses.proposal')),
                ('previous_application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='parkpasses.proposal')),
            ],
            options={
                'verbose_name': 'Application',
                'verbose_name_plural': 'Applications',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ProposalApplicantDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, default='', max_length=24)),
            ],
        ),
        migrations.CreateModel(
            name='ProposalLogDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('uploaded_date', models.DateTimeField(auto_now_add=True)),
                ('_file', models.FileField(upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='ProposalRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('text', models.TextField(blank=True)),
                ('officer', models.IntegerField()),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposalrequest_set', to='parkpasses.proposal')),
            ],
        ),
        migrations.CreateModel(
            name='ProposalType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=30, null=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReferralRecipientGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('members', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, size=None)),
            ],
            options={
                'verbose_name': 'Referral group',
                'verbose_name_plural': 'Referral groups',
            },
        ),
        migrations.CreateModel(
            name='RequiredDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SystemMaintenance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
            ],
            options={
                'verbose_name_plural': 'System maintenance',
            },
        ),
        migrations.CreateModel(
            name='UserSystemSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('one_row_per_park', models.BooleanField(default=False)),
                ('user', models.IntegerField(unique=True)),
                ('event_training_completed', models.BooleanField(default=False)),
                ('event_training_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'User System Settings',
            },
        ),
        migrations.CreateModel(
            name='AmendmentRequest',
            fields=[
                ('proposalrequest_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='parkpasses.proposalrequest')),
                ('status', models.CharField(choices=[('requested', 'Requested'), ('amended', 'Amended')], default='requested', max_length=30, verbose_name='Status')),
            ],
            bases=('parkpasses.proposalrequest',),
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('proposalrequest_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='parkpasses.proposalrequest')),
                ('assigned_assessor', models.IntegerField()),
                ('status', models.CharField(choices=[('awaiting_assessment', 'Awaiting Assessment'), ('assessed', 'Assessed'), ('assessment_expired', 'Assessment Period Expired')], default='awaiting_assessment', max_length=20, verbose_name='Status')),
                ('date_last_reminded', models.DateField(blank=True, null=True)),
                ('comment', models.TextField(blank=True)),
                ('purpose', models.TextField(blank=True)),
            ],
            bases=('parkpasses.proposalrequest',),
        ),
        migrations.CreateModel(
            name='ProposalLogEntry',
            fields=[
                ('communicationslogentry_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='parkpasses.communicationslogentry')),
            ],
            bases=('parkpasses.communicationslogentry',),
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lodged_on', models.DateTimeField(auto_now_add=True)),
                ('sent_by', models.IntegerField()),
                ('referral', models.IntegerField()),
                ('linked', models.BooleanField(default=False)),
                ('sent_from', models.SmallIntegerField(choices=[(1, 'Sent From Assessor'), (2, 'Sent From Referral')], default=1)),
                ('processing_status', models.CharField(choices=[('with_referral', 'Awaiting'), ('recalled', 'Recalled'), ('completed', 'Completed')], default='with_referral', max_length=30, verbose_name='Processing Status')),
                ('text', models.TextField(blank=True)),
                ('referral_text', models.TextField(blank=True)),
                ('assigned_officer', models.IntegerField()),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals', to='parkpasses.proposal')),
            ],
            options={
                'ordering': ('-lodged_on',),
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('answer_one', models.CharField(blank=True, max_length=200)),
                ('answer_two', models.CharField(blank=True, max_length=200)),
                ('answer_three', models.CharField(blank=True, max_length=200)),
                ('answer_four', models.CharField(blank=True, max_length=200)),
                ('correct_answer', models.CharField(choices=[('answer_one', 'Answer one'), ('answer_two', 'Answer two'), ('answer_three', 'Answer three'), ('answer_four', 'Answer four')], default='answer_one', max_length=40, verbose_name='Correct Answer')),
                ('application_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='parkpasses.applicationtype')),
            ],
        ),
        migrations.CreateModel(
            name='ProposalUserAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('who', models.IntegerField()),
                ('when', models.DateTimeField(auto_now_add=True)),
                ('what', models.TextField()),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='action_logs', to='parkpasses.proposal')),
            ],
            options={
                'ordering': ('-when',),
            },
        ),
        migrations.CreateModel(
            name='ProposalStandardRequirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('code', models.CharField(max_length=10, unique=True)),
                ('obsolete', models.BooleanField(default=False)),
                ('participant_number_required', models.BooleanField(default=False)),
                ('default', models.BooleanField(default=False)),
                ('application_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='parkpasses.applicationtype')),
            ],
            options={
                'verbose_name': 'Application Standard Requirement',
                'verbose_name_plural': 'Application Standard Requirements',
            },
        ),
        migrations.CreateModel(
            name='ProposalRequirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('free_requirement', models.TextField(blank=True, null=True)),
                ('standard', models.BooleanField(default=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('recurrence', models.BooleanField(default=False)),
                ('recurrence_pattern', models.SmallIntegerField(choices=[(1, 'Weekly'), (2, 'Monthly'), (3, 'Yearly')], default=1)),
                ('recurrence_schedule', models.IntegerField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('copied_for_renewal', models.BooleanField(default=False)),
                ('require_due_date', models.BooleanField(default=False)),
                ('notification_only', models.BooleanField(default=False)),
                ('req_order', models.IntegerField(blank=True, null=True)),
                ('copied_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='parkpasses.proposalrequirement')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requirements', to='parkpasses.proposal')),
                ('referral_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requirement_referral_groups', to='parkpasses.referralrecipientgroup')),
                ('standard_requirement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='parkpasses.proposalstandardrequirement')),
            ],
            options={
                'ordering': ['proposal', 'req_order'],
            },
        ),
        migrations.CreateModel(
            name='ProposalDeclinedDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('officer', models.IntegerField()),
                ('reason', models.TextField(blank=True)),
                ('cc_email', models.TextField(null=True)),
                ('proposal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='parkpasses.proposal')),
            ],
        ),
        migrations.AddField(
            model_name='proposal',
            name='proposal_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='parkpasses.proposaltype'),
        ),
        migrations.CreateModel(
            name='HelpPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', ckeditor.fields.RichTextField()),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('help_type', models.SmallIntegerField(choices=[(1, 'External'), (2, 'Internal')], default=1, verbose_name='Help Type')),
                ('version', models.SmallIntegerField(default=1)),
                ('application_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='parkpasses.applicationtype')),
            ],
        ),
        migrations.AddConstraint(
            model_name='proposalrequirement',
            constraint=models.UniqueConstraint(fields=('proposal', 'req_order'), name='unique requirement order per proposal'),
        ),
        migrations.AddField(
            model_name='proposallogentry',
            name='proposal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comms_logs', to='parkpasses.proposal'),
        ),
        migrations.AddField(
            model_name='proposallogdocument',
            name='log_entry',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='parkpasses.proposallogentry'),
        ),
        migrations.AlterUniqueTogether(
            name='helppage',
            unique_together={('application_type', 'help_type', 'version')},
        ),
        migrations.AddField(
            model_name='amendmentrequest',
            name='reason',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='parkpasses.amendmentreason'),
        ),
    ]
